TARGET::CPP

Int8Array test01
    null: creating Int8Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int8Array test02
    null: creating Int8Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int8Array test03
    null: creating Int8Array x from array of 2 [17,-45]
    null: creating second Int8Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int8Array test04
    null: creating Int8Array x from array of 2 [17,-45]
    null: creating second Int8Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int8Array test05
    null: creating ArrayBuffer(12) and x,y as Int8Array with buffer and mapping
    null: setting x[4] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Int8Array test06
    null: creating Int8Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int8Array test07
    null: creating Int8Array(10)
    null: calling set(new Int8Array([18, 93, 42]), 3)
      ▸ should set from other Int8Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int8Array test08
    null: creating x = Int8Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (0.218ms)




Int16Array test01
    null: creating Int16Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int16Array test02
    null: creating Int16Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int16Array test03
    null: creating Int16Array x from array of 2 [17,-45]
    null: creating second Int16Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int16Array test04
    null: creating Int16Array x from array of 2 [17,-45]
    null: creating second Int16Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int16Array test05
    null: creating ArrayBuffer(12) and x,y as Int16Array with buffer and mapping
    null: setting x[2] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Int16Array test06
    null: creating Int16Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int16Array test07
    null: creating Int16Array(10)
    null: calling set(Int16Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Int16Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int16Array test08
    null: creating x = Int16Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (0.327ms)




Int32Array test01
    null: creating Int32Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int32Array test02
    null: creating Int32Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int32Array test03
    null: creating Int32Array x from array of 2 [17,-45]
    null: creating second Int32Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int32Array test04
    null: creating Int32Array x from array of 2 [17,-45]
    null: creating second Int32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int32Array test05
    null: creating ArrayBuffer(12) and x,y as Int32Array with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7
        ✓ pass
Int32Array test06
    null: creating Int32Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int32Array test07
    null: creating Int32Array(10)
    null: calling set(Int32Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Int32Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int32Array test08
    null: creating x = Int32Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (0.221ms)




Uint8Array test01
    null: creating Uint8Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint8Array test02
    null: creating Uint8Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 211
          ✓ length == 2
        ✓ pass
Uint8Array test03
    null: creating Uint8Array x from array of 2 [17,-45]
    null: creating second Uint8Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 211
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 211
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 254
        ✓ pass
Uint8Array test04
    null: creating Uint8Array x from array of 2 [17,-45]
    null: creating second Uint8Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 211
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 211
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint8Array test05
    null: creating ArrayBuffer(12) and x,y as Uint8Array with buffer and mapping
    null: setting x[4] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Uint8Array test06
    null: creating Uint8Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8Array test07
    null: creating Uint8Array(10)
    null: calling set(Uint8Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint8Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8Array test08
    null: creating x = Uint8Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == 255
        ✓ pass


✓ 8 tests completed.  (0.227ms)




Uint8ClampedArray test01
    null: creating Uint8ClampedArray of 3 elements
    null: setting [0] to -17
    null: setting [1] to 93
    null: setting [2] to 350
      ▸ should be correctly constructed from n elements and set using Array Access, but clamped (no < 0 and no > 255)
          ✓ element [0] == 0
          ✓ element [1] == 93
          ✓ element [2] == 255
          ✓ length == 3
        ✓ pass
Uint8ClampedArray test02
    null: creating Uint8ClampedArray from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int, clamping negative value
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint8ClampedArray test03
    null: creating Uint8ClampedArray x from array of 2 [17,-45.3]
    null: creating second Uint8ClampedArray y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 0
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 0
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 0
        ✓ pass
Uint8ClampedArray test04
    null: creating Uint8ClampedArray x from array of 2 [17,-45.3]
    null: creating second Uint8ClampedArray y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 0
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 0
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint8ClampedArray test05
    null: creating ArrayBuffer(12) and x,y as Uint8ClampedArray with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 0
        ✓ pass
Uint8ClampedArray test06
    null: creating Uint8ClampedArray(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8ClampedArray test07
    null: creating Uint8ClampedArray(10)
    null: calling set(Uint8ClampedArray.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint8ClampedArray
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8ClampedArray test08
    null: creating x = Uint8ClampedArray([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == 0
        ✓ pass


✓ 8 tests completed.  (0.226ms)




Uint16Array test01
    null: creating Uint16Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint16Array test02
    null: creating Uint16Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 65491
          ✓ length == 2
        ✓ pass
Uint16Array test03
    null: creating Uint16Array x from array of 2 [17,-45]
    null: creating second Uint16Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 65491
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 65491
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 65534
        ✓ pass
Uint16Array test04
    null: creating Uint16Array x from array of 2 [17,-45]
    null: creating second Uint16Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 65491
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 65491
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint16Array test05
    null: creating ArrayBuffer(12) and x,y as Uint16Array with buffer and mapping
    null: setting x[2] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Uint16Array test06
    null: creating Uint16Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint16Array test07
    null: creating Uint16Array(10)
    null: calling set(Uint16Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint16Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint16Array test08
    null: creating x = Uint16Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == 65535
        ✓ pass


✓ 8 tests completed.  (0.209ms)




Uint32Array test01
    null: creating Uint32Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint32Array test02
    null: creating Uint32Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 4294967251
          ✓ length == 2
        ✓ pass
Uint32Array test03
    null: creating Uint32Array x from array of 2 [17,-45]
    null: creating second Uint32Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 4294967251
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 4294967251
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 4294967294
        ✓ pass
Uint32Array test04
    null: creating Uint32Array x from array of 2 [17,-45]
    null: creating second Uint32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 4294967251
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 4294967251
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint32Array test05
    null: creating ArrayBuffer(12) and x,y as Uint32Array with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7
        ✓ pass
Uint32Array test06
    null: creating Uint32Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint32Array test07
    null: creating Uint32Array(10)
    null: calling set(Uint32Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint32Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint32Array test08
    null: creating x = Uint32Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == 4294967295
        ✓ pass


✓ 8 tests completed.  (0.324ms)




Float32Array test01
    null: creating Float32Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17.0
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Float32Array test02
    null: creating Float32Array from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17.0
          ✓ element [1] == -45.3
          ✓ length == 2
        ✓ pass
Float32Array test03
    null: creating Float32Array x from array of 2 [17,-45.3]
    null: creating second Float32Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2.0
        ✓ pass
Float32Array test04
    null: creating Float32Array x from array of 2 [17,-45.3]
    null: creating second Float32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17.0
        ✓ pass
Float32Array test05
    null: creating ArrayBuffer(12) and x,y as Float32Array with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7.0
        ✓ pass
Float32Array test06
    null: creating Float32Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float32Array test07
    null: creating Float32Array(10)
    null: calling set(new Float32Array([18, 93, 42]), 3)
      ▸ should set from other Float32Array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float32Array test08
    null: creating x = Float32Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2.0
          ✓ y[1] == 3.0
        null: setting y[0] = -1
          ✓ x[2] == -1.0
        ✓ pass


✓ 8 tests completed.  (0.286ms)




Float64Array test01
    null: creating Float64Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17.0
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Float64Array test02
    null: creating Float64Array from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17.0
          ✓ element [1] == -45.3
          ✓ length == 2
        ✓ pass
Float64Array test03
    null: creating Float64Array x from array of 2 [17,-45.3]
    null: creating second Float64Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2.0
        ✓ pass
Float64Array test04
    null: creating Float64Array x from array of 2 [17,-45.3]
    null: creating second Float64Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17.0
        ✓ pass
Float64Array test05
    null: creating ArrayBuffer(16) and x,y as Float64Array with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7.0
        ✓ pass
Float64Array test06
    null: creating Float64Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float64Array test07
    null: creating Float64Array(10)
    null: calling set(new Float64Array([18, 93, 42]), 3)
      ▸ should set from other Float64Array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float64Array test08
    null: creating x = Float64Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2.0
          ✓ y[1] == 3.0
        null: setting y[0] = -1
          ✓ x[2] == -1.0
        ✓ pass


✓ 8 tests completed.  (0.302ms)


_TestTypedArrays.hx:58: completed 72 tests, 0 failures (2.34ms)

TARGET::NEKO

Int8Array test01
     at TestInt8Array.hx:19: creating Int8Array of 2 elements
     at TestInt8Array.hx:23: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int8Array test02
     at TestInt8Array.hx:37: creating Int8Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int8Array test03
     at TestInt8Array.hx:51: creating Int8Array x from array of 2 [17,-45]
     at TestInt8Array.hx:52: creating second Int8Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at TestInt8Array.hx:67: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int8Array test04
     at TestInt8Array.hx:79: creating Int8Array x from array of 2 [17,-45]
     at TestInt8Array.hx:80: creating second Int8Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at TestInt8Array.hx:95: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int8Array test05
     at TestInt8Array.hx:107: creating ArrayBuffer(12) and x,y as Int8Array with buffer and mapping
     at TestInt8Array.hx:113: setting x[4] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Int8Array test06
     at TestInt8Array.hx:127: creating Int8Array(10)
     at TestInt8Array.hx:131: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int8Array test07
     at TestInt8Array.hx:147: creating Int8Array(10)
     at TestInt8Array.hx:151: calling set(new Int8Array([18, 93, 42]), 3)
      ▸ should set from other Int8Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int8Array test08
     at TestInt8Array.hx:167: creating x = Int8Array([0, 1, 2, 3, 4, 5])
     at TestInt8Array.hx:171: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at TestInt8Array.hx:181: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (5.361ms)




Int16Array test01
     at TestInt16Array.hx:19: creating Int16Array of 2 elements
     at TestInt16Array.hx:23: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int16Array test02
     at TestInt16Array.hx:37: creating Int16Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int16Array test03
     at TestInt16Array.hx:51: creating Int16Array x from array of 2 [17,-45]
     at TestInt16Array.hx:52: creating second Int16Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at TestInt16Array.hx:67: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int16Array test04
     at TestInt16Array.hx:79: creating Int16Array x from array of 2 [17,-45]
     at TestInt16Array.hx:80: creating second Int16Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at TestInt16Array.hx:95: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int16Array test05
     at TestInt16Array.hx:107: creating ArrayBuffer(12) and x,y as Int16Array with buffer and mapping
     at TestInt16Array.hx:113: setting x[2] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Int16Array test06
     at TestInt16Array.hx:127: creating Int16Array(10)
     at TestInt16Array.hx:131: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int16Array test07
     at TestInt16Array.hx:147: creating Int16Array(10)
     at TestInt16Array.hx:151: calling set(Int16Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Int16Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int16Array test08
     at TestInt16Array.hx:167: creating x = Int16Array([0, 1, 2, 3, 4, 5])
     at TestInt16Array.hx:171: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at TestInt16Array.hx:181: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (5.158ms)




Int32Array test01
     at TestInt32Array.hx:19: creating Int32Array of 2 elements
     at TestInt32Array.hx:23: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int32Array test02
     at TestInt32Array.hx:37: creating Int32Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int32Array test03
     at TestInt32Array.hx:51: creating Int32Array x from array of 2 [17,-45]
     at TestInt32Array.hx:52: creating second Int32Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at TestInt32Array.hx:67: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int32Array test04
     at TestInt32Array.hx:79: creating Int32Array x from array of 2 [17,-45]
     at TestInt32Array.hx:80: creating second Int32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at TestInt32Array.hx:95: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int32Array test05
     at TestInt32Array.hx:107: creating ArrayBuffer(12) and x,y as Int32Array with buffer and mapping
     at TestInt32Array.hx:113: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7
        ✓ pass
Int32Array test06
     at TestInt32Array.hx:127: creating Int32Array(10)
     at TestInt32Array.hx:131: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int32Array test07
     at TestInt32Array.hx:147: creating Int32Array(10)
     at TestInt32Array.hx:151: calling set(Int32Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Int32Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int32Array test08
     at TestInt32Array.hx:167: creating x = Int32Array([0, 1, 2, 3, 4, 5])
     at TestInt32Array.hx:171: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at TestInt32Array.hx:181: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (5.981ms)




Uint8Array test01
     at TestUInt8Array.hx:19: creating Uint8Array of 2 elements
     at TestUInt8Array.hx:23: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint8Array test02
     at TestUInt8Array.hx:37: creating Uint8Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 211
          ✓ length == 2
        ✓ pass
Uint8Array test03
     at TestUInt8Array.hx:51: creating Uint8Array x from array of 2 [17,-45]
     at TestUInt8Array.hx:52: creating second Uint8Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 211
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 211
          ✓ y length == 2
         at TestUInt8Array.hx:67: setting x element [0] to -2
          ✓ y element [0] == 254
        ✓ pass
Uint8Array test04
     at TestUInt8Array.hx:79: creating Uint8Array x from array of 2 [17,-45]
     at TestUInt8Array.hx:80: creating second Uint8Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 211
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 211
          ✓ y length == 2
         at TestUInt8Array.hx:95: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint8Array test05
     at TestUInt8Array.hx:107: creating ArrayBuffer(12) and x,y as Uint8Array with buffer and mapping
     at TestUInt8Array.hx:113: setting x[4] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Uint8Array test06
     at TestUInt8Array.hx:127: creating Uint8Array(10)
     at TestUInt8Array.hx:131: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8Array test07
     at TestUInt8Array.hx:147: creating Uint8Array(10)
     at TestUInt8Array.hx:151: calling set(Uint8Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint8Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8Array test08
     at TestUInt8Array.hx:167: creating x = Uint8Array([0, 1, 2, 3, 4, 5])
     at TestUInt8Array.hx:171: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at TestUInt8Array.hx:181: setting y[0] = -1
          ✓ x[2] == 255
        ✓ pass


✓ 8 tests completed.  (6.27ms)




Uint8ClampedArray test01
     at TestUInt8ClampedArray.hx:19: creating Uint8ClampedArray of 3 elements
     at TestUInt8ClampedArray.hx:23: setting [0] to -17
     at TestUInt8ClampedArray.hx:24: setting [1] to 93
     at TestUInt8ClampedArray.hx:25: setting [2] to 350
      ▸ should be correctly constructed from n elements and set using Array Access, but clamped (no < 0 and no > 255)
          ✓ element [0] == 0
          ✓ element [1] == 93
          ✓ element [2] == 255
          ✓ length == 3
        ✓ pass
Uint8ClampedArray test02
     at TestUInt8ClampedArray.hx:42: creating Uint8ClampedArray from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int, clamping negative value
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint8ClampedArray test03
     at TestUInt8ClampedArray.hx:56: creating Uint8ClampedArray x from array of 2 [17,-45.3]
     at TestUInt8ClampedArray.hx:57: creating second Uint8ClampedArray y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 0
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 0
          ✓ y length == 2
         at TestUInt8ClampedArray.hx:72: setting x element [0] to -2
          ✓ y element [0] == 0
        ✓ pass
Uint8ClampedArray test04
     at TestUInt8ClampedArray.hx:84: creating Uint8ClampedArray x from array of 2 [17,-45.3]
     at TestUInt8ClampedArray.hx:85: creating second Uint8ClampedArray y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 0
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 0
          ✓ y length == 2
         at TestUInt8ClampedArray.hx:100: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint8ClampedArray test05
     at TestUInt8ClampedArray.hx:112: creating ArrayBuffer(12) and x,y as Uint8ClampedArray with buffer and mapping
     at TestUInt8ClampedArray.hx:118: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 0
        ✓ pass
Uint8ClampedArray test06
     at TestUInt8ClampedArray.hx:132: creating Uint8ClampedArray(10)
     at TestUInt8ClampedArray.hx:136: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8ClampedArray test07
     at TestUInt8ClampedArray.hx:152: creating Uint8ClampedArray(10)
     at TestUInt8ClampedArray.hx:156: calling set(Uint8ClampedArray.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint8ClampedArray
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8ClampedArray test08
     at TestUInt8ClampedArray.hx:172: creating x = Uint8ClampedArray([0, 1, 2, 3, 4, 5])
     at TestUInt8ClampedArray.hx:176: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at TestUInt8ClampedArray.hx:186: setting y[0] = -1
          ✓ x[2] == 0
        ✓ pass


✓ 8 tests completed.  (6.922ms)




Uint16Array test01
     at TestUInt16Array.hx:19: creating Uint16Array of 2 elements
     at TestUInt16Array.hx:23: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint16Array test02
     at TestUInt16Array.hx:37: creating Uint16Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 65491
          ✓ length == 2
        ✓ pass
Uint16Array test03
     at TestUInt16Array.hx:51: creating Uint16Array x from array of 2 [17,-45]
     at TestUInt16Array.hx:52: creating second Uint16Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 65491
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 65491
          ✓ y length == 2
         at TestUInt16Array.hx:67: setting x element [0] to -2
          ✓ y element [0] == 65534
        ✓ pass
Uint16Array test04
     at TestUInt16Array.hx:79: creating Uint16Array x from array of 2 [17,-45]
     at TestUInt16Array.hx:80: creating second Uint16Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 65491
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 65491
          ✓ y length == 2
         at TestUInt16Array.hx:95: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint16Array test05
     at TestUInt16Array.hx:107: creating ArrayBuffer(12) and x,y as Uint16Array with buffer and mapping
     at TestUInt16Array.hx:113: setting x[2] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Uint16Array test06
     at TestUInt16Array.hx:127: creating Uint16Array(10)
     at TestUInt16Array.hx:131: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint16Array test07
     at TestUInt16Array.hx:147: creating Uint16Array(10)
     at TestUInt16Array.hx:151: calling set(Uint16Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint16Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint16Array test08
     at TestUInt16Array.hx:167: creating x = Uint16Array([0, 1, 2, 3, 4, 5])
     at TestUInt16Array.hx:171: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at TestUInt16Array.hx:181: setting y[0] = -1
          ✓ x[2] == 65535
        ✓ pass


✓ 8 tests completed.  (5.836ms)




Uint32Array test01
     at TestUInt32Array.hx:19: creating Uint32Array of 2 elements
     at TestUInt32Array.hx:23: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint32Array test02
     at TestUInt32Array.hx:37: creating Uint32Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 4294967251
          ✓ length == 2
        ✓ pass
Uint32Array test03
     at TestUInt32Array.hx:51: creating Uint32Array x from array of 2 [17,-45]
     at TestUInt32Array.hx:52: creating second Uint32Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 4294967251
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 4294967251
          ✓ y length == 2
         at TestUInt32Array.hx:67: setting x element [0] to -2
          ✓ y element [0] == 4294967294
        ✓ pass
Uint32Array test04
     at TestUInt32Array.hx:79: creating Uint32Array x from array of 2 [17,-45]
     at TestUInt32Array.hx:80: creating second Uint32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 4294967251
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 4294967251
          ✓ y length == 2
         at TestUInt32Array.hx:95: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint32Array test05
     at TestUInt32Array.hx:107: creating ArrayBuffer(12) and x,y as Uint32Array with buffer and mapping
     at TestUInt32Array.hx:113: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7
        ✓ pass
Uint32Array test06
     at TestUInt32Array.hx:127: creating Uint32Array(10)
     at TestUInt32Array.hx:131: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint32Array test07
     at TestUInt32Array.hx:147: creating Uint32Array(10)
     at TestUInt32Array.hx:151: calling set(Uint32Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint32Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint32Array test08
     at TestUInt32Array.hx:167: creating x = Uint32Array([0, 1, 2, 3, 4, 5])
     at TestUInt32Array.hx:171: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at TestUInt32Array.hx:181: setting y[0] = -1
          ✓ x[2] == 4294967295
        ✓ pass


✓ 8 tests completed.  (5.878ms)




Float32Array test01
     at TestFloat32Array.hx:19: creating Float32Array of 2 elements
     at TestFloat32Array.hx:23: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17.0
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Float32Array test02
     at TestFloat32Array.hx:37: creating Float32Array from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17.0
          ✓ element [1] == -45.3
          ✓ length == 2
        ✓ pass
Float32Array test03
     at TestFloat32Array.hx:51: creating Float32Array x from array of 2 [17,-45.3]
     at TestFloat32Array.hx:52: creating second Float32Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
         at TestFloat32Array.hx:67: setting x element [0] to -2
          ✓ element [0] == -2.0
        ✓ pass
Float32Array test04
     at TestFloat32Array.hx:79: creating Float32Array x from array of 2 [17,-45.3]
     at TestFloat32Array.hx:80: creating second Float32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
         at TestFloat32Array.hx:95: setting x element [0] to -2
          ✓ y element [0] == 17.0
        ✓ pass
Float32Array test05
     at TestFloat32Array.hx:107: creating ArrayBuffer(12) and x,y as Float32Array with buffer and mapping
     at TestFloat32Array.hx:113: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7.0
        ✓ pass
Float32Array test06
     at TestFloat32Array.hx:127: creating Float32Array(10)
     at TestFloat32Array.hx:131: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float32Array test07
     at TestFloat32Array.hx:147: creating Float32Array(10)
     at TestFloat32Array.hx:151: calling set(new Float32Array([18, 93, 42]), 3)
      ▸ should set from other Float32Array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float32Array test08
     at TestFloat32Array.hx:167: creating x = Float32Array([0, 1, 2, 3, 4, 5])
     at TestFloat32Array.hx:171: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2.0
          ✓ y[1] == 3.0
         at TestFloat32Array.hx:181: setting y[0] = -1
          ✓ x[2] == -1.0
        ✓ pass


✓ 8 tests completed.  (5.619ms)




Float64Array test01
     at TestFloat64Array.hx:19: creating Float64Array of 2 elements
     at TestFloat64Array.hx:23: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17.0
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Float64Array test02
     at TestFloat64Array.hx:37: creating Float64Array from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17.0
          ✓ element [1] == -45.3
          ✓ length == 2
        ✓ pass
Float64Array test03
     at TestFloat64Array.hx:51: creating Float64Array x from array of 2 [17,-45.3]
     at TestFloat64Array.hx:52: creating second Float64Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
         at TestFloat64Array.hx:67: setting x element [0] to -2
          ✓ element [0] == -2.0
        ✓ pass
Float64Array test04
     at TestFloat64Array.hx:79: creating Float64Array x from array of 2 [17,-45.3]
     at TestFloat64Array.hx:80: creating second Float64Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
         at TestFloat64Array.hx:95: setting x element [0] to -2
          ✓ y element [0] == 17.0
        ✓ pass
Float64Array test05
     at TestFloat64Array.hx:107: creating ArrayBuffer(16) and x,y as Float64Array with buffer and mapping
     at TestFloat64Array.hx:113: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7.0
        ✓ pass
Float64Array test06
     at TestFloat64Array.hx:127: creating Float64Array(10)
     at TestFloat64Array.hx:131: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float64Array test07
     at TestFloat64Array.hx:147: creating Float64Array(10)
     at TestFloat64Array.hx:151: calling set(new Float64Array([18, 93, 42]), 3)
      ▸ should set from other Float64Array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float64Array test08
     at TestFloat64Array.hx:167: creating x = Float64Array([0, 1, 2, 3, 4, 5])
     at TestFloat64Array.hx:171: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2.0
          ✓ y[1] == 3.0
         at TestFloat64Array.hx:181: setting y[0] = -1
          ✓ x[2] == -1.0
        ✓ pass


✓ 8 tests completed.  (6.118ms)


_TestTypedArrays.hx:58: completed 72 tests, 0 failures (53.143ms)

TARGET::PHP

Int8Array test01
    null: creating Int8Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int8Array test02
    null: creating Int8Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int8Array test03
    null: creating Int8Array x from array of 2 [17,-45]
    null: creating second Int8Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int8Array test04
    null: creating Int8Array x from array of 2 [17,-45]
    null: creating second Int8Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int8Array test05
    null: creating ArrayBuffer(12) and x,y as Int8Array with buffer and mapping
    null: setting x[4] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Int8Array test06
    null: creating Int8Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int8Array test07
    null: creating Int8Array(10)
    null: calling set(new Int8Array([18, 93, 42]), 3)
      ▸ should set from other Int8Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int8Array test08
    null: creating x = Int8Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (5.622ms)





Int16Array test01
    null: creating Int16Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int16Array test02
    null: creating Int16Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int16Array test03
    null: creating Int16Array x from array of 2 [17,-45]
    null: creating second Int16Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int16Array test04
    null: creating Int16Array x from array of 2 [17,-45]
    null: creating second Int16Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int16Array test05
    null: creating ArrayBuffer(12) and x,y as Int16Array with buffer and mapping
    null: setting x[2] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Int16Array test06
    null: creating Int16Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int16Array test07
    null: creating Int16Array(10)
    null: calling set(Int16Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Int16Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int16Array test08
    null: creating x = Int16Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (3.301ms)





Int32Array test01
    null: creating Int32Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int32Array test02
    null: creating Int32Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✖ element [1] == -45 -45 != 4294967251
        ✖ fail (0)
Int32Array test03
    null: creating Int32Array x from array of 2 [17,-45]
    null: creating second Int32Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✖ x element [1] == -45 -45 != 4294967251
        ✖ fail (1)
Int32Array test04
    null: creating Int32Array x from array of 2 [17,-45]
    null: creating second Int32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✖ x element [1] == -45 -45 != 4294967251
        ✖ fail (2)
Int32Array test05
    null: creating ArrayBuffer(12) and x,y as Int32Array with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7
        ✓ pass
Int32Array test06
    null: creating Int32Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int32Array test07
    null: creating Int32Array(10)
    null: calling set(Int32Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Int32Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int32Array test08
    null: creating x = Int32Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✖ x[2] == -1 -1 != 4294967295
        ✖ fail (3)


✖ 4 of 8 failed  (3.004ms) 

  0) should be correctly constructed from array of Int
    ✖ because -45 != 4294967251  (element [1] == -45)


  1) should share a buffer from other array buffer
    ✖ because -45 != 4294967251  (x element [1] == -45)


  2) should share a buffer from other array
    ✖ because -45 != 4294967251  (x element [1] == -45)


  3) Show map correctly as a buffer view
    ✖ because -1 != 4294967295  (x[2] == -1)







Uint8Array test01
    null: creating Uint8Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint8Array test02
    null: creating Uint8Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 211
          ✓ length == 2
        ✓ pass
Uint8Array test03
    null: creating Uint8Array x from array of 2 [17,-45]
    null: creating second Uint8Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 211
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 211
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 254
        ✓ pass
Uint8Array test04
    null: creating Uint8Array x from array of 2 [17,-45]
    null: creating second Uint8Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 211
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 211
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint8Array test05
    null: creating ArrayBuffer(12) and x,y as Uint8Array with buffer and mapping
    null: setting x[4] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Uint8Array test06
    null: creating Uint8Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8Array test07
    null: creating Uint8Array(10)
    null: calling set(Uint8Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint8Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8Array test08
    null: creating x = Uint8Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == 255
        ✓ pass


✓ 8 tests completed.  (2.723ms)





Uint8ClampedArray test01
    null: creating Uint8ClampedArray of 3 elements
    null: setting [0] to -17
    null: setting [1] to 93
    null: setting [2] to 350
      ▸ should be correctly constructed from n elements and set using Array Access, but clamped (no < 0 and no > 255)
          ✖ element [0] == 0 0 != 255
        ✖ fail (0)
Uint8ClampedArray test02
    null: creating Uint8ClampedArray from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int, clamping negative value
          ✓ element [0] == 17
          ✖ element [1] == 0 0 != 255
        ✖ fail (1)
Uint8ClampedArray test03
    null: creating Uint8ClampedArray x from array of 2 [17,-45.3]
    null: creating second Uint8ClampedArray y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✖ x element [1] == 0 0 != 255
        ✖ fail (2)
Uint8ClampedArray test04
    null: creating Uint8ClampedArray x from array of 2 [17,-45.3]
    null: creating second Uint8ClampedArray y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✖ x element [1] == 0 0 != 255
        ✖ fail (3)
Uint8ClampedArray test05
    null: creating ArrayBuffer(12) and x,y as Uint8ClampedArray with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 0
        ✓ pass
Uint8ClampedArray test06
    null: creating Uint8ClampedArray(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8ClampedArray test07
    null: creating Uint8ClampedArray(10)
    null: calling set(Uint8ClampedArray.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint8ClampedArray
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8ClampedArray test08
    null: creating x = Uint8ClampedArray([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✖ x[2] == 0 0 != 255
        ✖ fail (4)


✖ 5 of 8 failed  (2.724ms) 

  0) should be correctly constructed from n elements and set using Array Access, but clamped (no < 0 and no > 255)
    ✖ because 0 != 255  (element [0] == 0)


  1) should be correctly constructed from array of Int, clamping negative value
    ✖ because 0 != 255  (element [1] == 0)


  2) should share a buffer from other array buffer, wrapped value
    ✖ because 0 != 255  (x element [1] == 0)


  3) should share a buffer from other array
    ✖ because 0 != 255  (x element [1] == 0)


  4) Show map correctly as a buffer view, wrapping values
    ✖ because 0 != 255  (x[2] == 0)







Uint16Array test01
    null: creating Uint16Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint16Array test02
    null: creating Uint16Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 65491
          ✓ length == 2
        ✓ pass
Uint16Array test03
    null: creating Uint16Array x from array of 2 [17,-45]
    null: creating second Uint16Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 65491
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 65491
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 65534
        ✓ pass
Uint16Array test04
    null: creating Uint16Array x from array of 2 [17,-45]
    null: creating second Uint16Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 65491
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 65491
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint16Array test05
    null: creating ArrayBuffer(12) and x,y as Uint16Array with buffer and mapping
    null: setting x[2] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Uint16Array test06
    null: creating Uint16Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint16Array test07
    null: creating Uint16Array(10)
    null: calling set(Uint16Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint16Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint16Array test08
    null: creating x = Uint16Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✓ x[2] == 65535
        ✓ pass


✓ 8 tests completed.  (2.707ms)





Uint32Array test01
    null: creating Uint32Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint32Array test02
    null: creating Uint32Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✖ element [1] == 4294967251 4294967251 != 4294967251
        ✖ fail (0)
Uint32Array test03
    null: creating Uint32Array x from array of 2 [17,-45]
    null: creating second Uint32Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✖ x element [1] == 4294967251 4294967251 != 4294967251
        ✖ fail (1)
Uint32Array test04
    null: creating Uint32Array x from array of 2 [17,-45]
    null: creating second Uint32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✖ x element [1] == 4294967251 4294967251 != 4294967251
        ✖ fail (2)
Uint32Array test05
    null: creating ArrayBuffer(12) and x,y as Uint32Array with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7
        ✓ pass
Uint32Array test06
    null: creating Uint32Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint32Array test07
    null: creating Uint32Array(10)
    null: calling set(Uint32Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint32Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint32Array test08
    null: creating x = Uint32Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
        null: setting y[0] = -1
          ✖ x[2] == 4294967295 4294967295 != 4294967295
        ✖ fail (3)


✖ 4 of 8 failed  (2.799ms) 

  0) should be correctly constructed from array of Int, wrapping negative value
    ✖ because 4294967251 != 4294967251  (element [1] == 4294967251)


  1) should share a buffer from other array buffer, wrapped value
    ✖ because 4294967251 != 4294967251  (x element [1] == 4294967251)


  2) should share a buffer from other array
    ✖ because 4294967251 != 4294967251  (x element [1] == 4294967251)


  3) Show map correctly as a buffer view, wrapping values
    ✖ because 4294967295 != 4294967295  (x[2] == 4294967295)







Float32Array test01
    null: creating Float32Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17.0
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Float32Array test02
    null: creating Float32Array from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17.0
          ✓ element [1] == -45.3
          ✓ length == 2
        ✓ pass
Float32Array test03
    null: creating Float32Array x from array of 2 [17,-45.3]
    null: creating second Float32Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2.0
        ✓ pass
Float32Array test04
    null: creating Float32Array x from array of 2 [17,-45.3]
    null: creating second Float32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17.0
        ✓ pass
Float32Array test05
    null: creating ArrayBuffer(12) and x,y as Float32Array with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7.0
        ✓ pass
Float32Array test06
    null: creating Float32Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float32Array test07
    null: creating Float32Array(10)
    null: calling set(new Float32Array([18, 93, 42]), 3)
      ▸ should set from other Float32Array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float32Array test08
    null: creating x = Float32Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2.0
          ✓ y[1] == 3.0
        null: setting y[0] = -1
          ✓ x[2] == -1.0
        ✓ pass


✓ 8 tests completed.  (2.372ms)





Float64Array test01
    null: creating Float64Array of 2 elements
    null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17.0
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Float64Array test02
    null: creating Float64Array from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17.0
          ✓ element [1] == -45.3
          ✓ length == 2
        ✓ pass
Float64Array test03
    null: creating Float64Array x from array of 2 [17,-45.3]
    null: creating second Float64Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ element [0] == -2.0
        ✓ pass
Float64Array test04
    null: creating Float64Array x from array of 2 [17,-45.3]
    null: creating second Float64Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
        null: setting x element [0] to -2
          ✓ y element [0] == 17.0
        ✓ pass
Float64Array test05
    null: creating ArrayBuffer(16) and x,y as Float64Array with buffer and mapping
    null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7.0
        ✓ pass
Float64Array test06
    null: creating Float64Array(10)
    null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float64Array test07
    null: creating Float64Array(10)
    null: calling set(new Float64Array([18, 93, 42]), 3)
      ▸ should set from other Float64Array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float64Array test08
    null: creating x = Float64Array([0, 1, 2, 3, 4, 5])
    null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2.0
          ✓ y[1] == 3.0
        null: setting y[0] = -1
          ✓ x[2] == -1.0
        ✓ pass


✓ 8 tests completed.  (2.953ms)



_TestTypedArrays.hx:58: completed 72 tests, 13 failures (28.205ms)

uncaught exception: tests failed

TARGET::JAVA

Int8Array test01
     at log_String:null: creating Int8Array of 2 elements
     at log_String:null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int8Array test02
     at log_String:null: creating Int8Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int8Array test03
     at log_String:null: creating Int8Array x from array of 2 [17,-45]
     at log_String:null: creating second Int8Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int8Array test04
     at log_String:null: creating Int8Array x from array of 2 [17,-45]
     at log_String:null: creating second Int8Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int8Array test05
     at log_String:null: creating ArrayBuffer(12) and x,y as Int8Array with buffer and mapping
     at log_String:null: setting x[4] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Int8Array test06
     at log_String:null: creating Int8Array(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int8Array test07
     at log_String:null: creating Int8Array(10)
     at log_String:null: calling set(new Int8Array([18, 93, 42]), 3)
      ▸ should set from other Int8Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int8Array test08
     at log_String:null: creating x = Int8Array([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at log_String:null: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (0ms)





Int16Array test01
     at log_String:null: creating Int16Array of 2 elements
     at log_String:null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int16Array test02
     at log_String:null: creating Int16Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int16Array test03
     at log_String:null: creating Int16Array x from array of 2 [17,-45]
     at log_String:null: creating second Int16Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int16Array test04
     at log_String:null: creating Int16Array x from array of 2 [17,-45]
     at log_String:null: creating second Int16Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int16Array test05
     at log_String:null: creating ArrayBuffer(12) and x,y as Int16Array with buffer and mapping
     at log_String:null: setting x[2] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Int16Array test06
     at log_String:null: creating Int16Array(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int16Array test07
     at log_String:null: creating Int16Array(10)
     at log_String:null: calling set(Int16Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Int16Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int16Array test08
     at log_String:null: creating x = Int16Array([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at log_String:null: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (0ms)





Int32Array test01
     at log_String:null: creating Int32Array of 2 elements
     at log_String:null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Int32Array test02
     at log_String:null: creating Int32Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17
          ✓ element [1] == -45
          ✓ length == 2
        ✓ pass
Int32Array test03
     at log_String:null: creating Int32Array x from array of 2 [17,-45]
     at log_String:null: creating second Int32Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ element [0] == -2
        ✓ pass
Int32Array test04
     at log_String:null: creating Int32Array x from array of 2 [17,-45]
     at log_String:null: creating second Int32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == -45
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == -45
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Int32Array test05
     at log_String:null: creating ArrayBuffer(12) and x,y as Int32Array with buffer and mapping
     at log_String:null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7
        ✓ pass
Int32Array test06
     at log_String:null: creating Int32Array(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int32Array test07
     at log_String:null: creating Int32Array(10)
     at log_String:null: calling set(Int32Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Int32Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Int32Array test08
     at log_String:null: creating x = Int32Array([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at log_String:null: setting y[0] = -1
          ✓ x[2] == -1
        ✓ pass


✓ 8 tests completed.  (0ms)





Uint8Array test01
     at log_String:null: creating Uint8Array of 2 elements
     at log_String:null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint8Array test02
     at log_String:null: creating Uint8Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 211
          ✓ length == 2
        ✓ pass
Uint8Array test03
     at log_String:null: creating Uint8Array x from array of 2 [17,-45]
     at log_String:null: creating second Uint8Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 211
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 211
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 254
        ✓ pass
Uint8Array test04
     at log_String:null: creating Uint8Array x from array of 2 [17,-45]
     at log_String:null: creating second Uint8Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 211
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 211
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint8Array test05
     at log_String:null: creating ArrayBuffer(12) and x,y as Uint8Array with buffer and mapping
     at log_String:null: setting x[4] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Uint8Array test06
     at log_String:null: creating Uint8Array(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8Array test07
     at log_String:null: creating Uint8Array(10)
     at log_String:null: calling set(Uint8Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint8Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8Array test08
     at log_String:null: creating x = Uint8Array([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at log_String:null: setting y[0] = -1
          ✓ x[2] == 255
        ✓ pass


✓ 8 tests completed.  (0ms)





Uint8ClampedArray test01
     at log_String:null: creating Uint8ClampedArray of 3 elements
     at log_String:null: setting [0] to -17
     at log_String:null: setting [1] to 93
     at log_String:null: setting [2] to 350
      ▸ should be correctly constructed from n elements and set using Array Access, but clamped (no < 0 and no > 255)
          ✖ element [0] == 0 0 != 255
        ✖ fail (0)
Uint8ClampedArray test02
     at log_String:null: creating Uint8ClampedArray from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int, clamping negative value
          ✓ element [0] == 17
          ✖ element [1] == 0 0 != 255
        ✖ fail (1)
Uint8ClampedArray test03
     at log_String:null: creating Uint8ClampedArray x from array of 2 [17,-45.3]
     at log_String:null: creating second Uint8ClampedArray y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✖ x element [1] == 0 0 != 255
        ✖ fail (2)
Uint8ClampedArray test04
     at log_String:null: creating Uint8ClampedArray x from array of 2 [17,-45.3]
     at log_String:null: creating second Uint8ClampedArray y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✖ x element [1] == 0 0 != 255
        ✖ fail (3)
Uint8ClampedArray test05
     at log_String:null: creating ArrayBuffer(12) and x,y as Uint8ClampedArray with buffer and mapping
     at log_String:null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 0
        ✓ pass
Uint8ClampedArray test06
     at log_String:null: creating Uint8ClampedArray(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8ClampedArray test07
     at log_String:null: creating Uint8ClampedArray(10)
     at log_String:null: calling set(Uint8ClampedArray.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint8ClampedArray
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint8ClampedArray test08
     at log_String:null: creating x = Uint8ClampedArray([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at log_String:null: setting y[0] = -1
          ✖ x[2] == 0 0 != 255
        ✖ fail (4)


✖ 5 of 8 failed  (0ms) 

  0) should be correctly constructed from n elements and set using Array Access, but clamped (no < 0 and no > 255)
    ✖ because 0 != 255  (element [0] == 0)


  1) should be correctly constructed from array of Int, clamping negative value
    ✖ because 0 != 255  (element [1] == 0)


  2) should share a buffer from other array buffer, wrapped value
    ✖ because 0 != 255  (x element [1] == 0)


  3) should share a buffer from other array
    ✖ because 0 != 255  (x element [1] == 0)


  4) Show map correctly as a buffer view, wrapping values
    ✖ because 0 != 255  (x[2] == 0)







Uint16Array test01
     at log_String:null: creating Uint16Array of 2 elements
     at log_String:null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint16Array test02
     at log_String:null: creating Uint16Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 65491
          ✓ length == 2
        ✓ pass
Uint16Array test03
     at log_String:null: creating Uint16Array x from array of 2 [17,-45]
     at log_String:null: creating second Uint16Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 65491
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 65491
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 65534
        ✓ pass
Uint16Array test04
     at log_String:null: creating Uint16Array x from array of 2 [17,-45]
     at log_String:null: creating second Uint16Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 65491
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 65491
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint16Array test05
     at log_String:null: creating ArrayBuffer(12) and x,y as Uint16Array with buffer and mapping
     at log_String:null: setting x[2] = 4
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 4
        ✓ pass
Uint16Array test06
     at log_String:null: creating Uint16Array(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint16Array test07
     at log_String:null: creating Uint16Array(10)
     at log_String:null: calling set(Uint16Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint16Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint16Array test08
     at log_String:null: creating x = Uint16Array([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at log_String:null: setting y[0] = -1
          ✓ x[2] == 65535
        ✓ pass


✓ 8 tests completed.  (0ms)





Uint32Array test01
     at log_String:null: creating Uint32Array of 2 elements
     at log_String:null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Uint32Array test02
     at log_String:null: creating Uint32Array from array of 2 [17,-45]
      ▸ should be correctly constructed from array of Int, wrapping negative value
          ✓ element [0] == 17
          ✓ element [1] == 4294967251
          ✓ length == 2
        ✓ pass
Uint32Array test03
     at log_String:null: creating Uint32Array x from array of 2 [17,-45]
     at log_String:null: creating second Uint32Array y from first array .buffer
      ▸ should share a buffer from other array buffer, wrapped value
          ✓ x element [0] == 17
          ✓ x element [1] == 4294967251
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 4294967251
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 4294967294
        ✓ pass
Uint32Array test04
     at log_String:null: creating Uint32Array x from array of 2 [17,-45]
     at log_String:null: creating second Uint32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17
          ✓ x element [1] == 4294967251
          ✓ x length == 2
          ✓ y element [0] == 17
          ✓ y element [1] == 4294967251
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 17
        ✓ pass
Uint32Array test05
     at log_String:null: creating ArrayBuffer(12) and x,y as Uint32Array with buffer and mapping
     at log_String:null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7
        ✓ pass
Uint32Array test06
     at log_String:null: creating Uint32Array(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint32Array test07
     at log_String:null: creating Uint32Array(10)
     at log_String:null: calling set(Uint32Array.fromArray([18, 93, 42]), 3)
      ▸ should set from other Uint32Array
          ✓ x[3] == 18
          ✓ x[4] == 93
          ✓ x[5] == 42
        ✓ pass
Uint32Array test08
     at log_String:null: creating x = Uint32Array([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view, wrapping values
          ✓ y.length == 3
          ✓ y[0] == 2
          ✓ y[1] == 3
         at log_String:null: setting y[0] = -1
          ✓ x[2] == 4294967295
        ✓ pass


✓ 8 tests completed.  (0ms)





Float32Array test01
     at log_String:null: creating Float32Array of 2 elements
     at log_String:null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17.0
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Float32Array test02
     at log_String:null: creating Float32Array from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17.0
          ✓ element [1] == -45.3
          ✓ length == 2
        ✓ pass
Float32Array test03
     at log_String:null: creating Float32Array x from array of 2 [17,-45.3]
     at log_String:null: creating second Float32Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ element [0] == -2.0
        ✓ pass
Float32Array test04
     at log_String:null: creating Float32Array x from array of 2 [17,-45.3]
     at log_String:null: creating second Float32Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 17.0
        ✓ pass
Float32Array test05
     at log_String:null: creating ArrayBuffer(12) and x,y as Float32Array with buffer and mapping
     at log_String:null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7.0
        ✓ pass
Float32Array test06
     at log_String:null: creating Float32Array(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float32Array test07
     at log_String:null: creating Float32Array(10)
     at log_String:null: calling set(new Float32Array([18, 93, 42]), 3)
      ▸ should set from other Float32Array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float32Array test08
     at log_String:null: creating x = Float32Array([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2.0
          ✓ y[1] == 3.0
         at log_String:null: setting y[0] = -1
          ✓ x[2] == -1.0
        ✓ pass


✓ 8 tests completed.  (0ms)





Float64Array test01
     at log_String:null: creating Float64Array of 2 elements
     at log_String:null: setting [0] to 17
      ▸ should be correctly constructed from n elements and set using Array Access
          ✓ element [0] == 17.0
          ✓ element [1] == 0
          ✓ length == 2
        ✓ pass
Float64Array test02
     at log_String:null: creating Float64Array from array of 2 [17,-45.3]
      ▸ should be correctly constructed from array of Int
          ✓ element [0] == 17.0
          ✓ element [1] == -45.3
          ✓ length == 2
        ✓ pass
Float64Array test03
     at log_String:null: creating Float64Array x from array of 2 [17,-45.3]
     at log_String:null: creating second Float64Array y from first array .buffer
      ▸ should share a buffer from other array buffer
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ element [0] == -2.0
        ✓ pass
Float64Array test04
     at log_String:null: creating Float64Array x from array of 2 [17,-45.3]
     at log_String:null: creating second Float64Array y from first array itself
      ▸ should share a buffer from other array
          ✓ x element [0] == 17.0
          ✓ x element [1] == -45.3
          ✓ x length == 2
          ✓ y element [0] == 17.0
          ✓ y element [1] == -45.3
          ✓ y length == 2
         at log_String:null: setting x element [0] to -2
          ✓ y element [0] == 17.0
        ✓ pass
Float64Array test05
     at log_String:null: creating ArrayBuffer(16) and x,y as Float64Array with buffer and mapping
     at log_String:null: setting x[1] = 7
      ▸ should construct from shared ArrayBuffer and have values mapped
          ✓ y element 0 == 7.0
        ✓ pass
Float64Array test06
     at log_String:null: creating Float64Array(10)
     at log_String:null: calling set([18,93,42],3)
      ▸ should set from normal int array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float64Array test07
     at log_String:null: creating Float64Array(10)
     at log_String:null: calling set(new Float64Array([18, 93, 42]), 3)
      ▸ should set from other Float64Array
          ✓ x[3] == 18.0
          ✓ x[4] == 93.0
          ✓ x[5] == 42.0
        ✓ pass
Float64Array test08
     at log_String:null: creating x = Float64Array([0, 1, 2, 3, 4, 5])
     at log_String:null: creating y = x.subarray(2,5)
      ▸ Show map correctly as a buffer view
          ✓ y.length == 3
          ✓ y[0] == 2.0
          ✓ y[1] == 3.0
         at log_String:null: setting y[0] = -1
          ✓ x[2] == -1.0
        ✓ pass


✓ 8 tests completed.  (0ms)


_TestTypedArrays.hx:58: completed 72 tests, 5 failures (0ms)

